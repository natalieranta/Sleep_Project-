# -*- coding: utf-8 -*-
"""Modeling ELEC 872.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17IYJE7n3Jb5w4uHV66t2SVajxCOj9Eky
"""

# Commented out IPython magic to ensure Python compatibility.
#add needed Libraries and constants
import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.metrics import f1_score
from sklearn.metrics import confusion_matrix
from sklearn.metrics import classification_report
from sklearn.metrics import mean_squared_error
from sklearn.model_selection import train_test_split
from sklearn import tree
from sklearn import metrics
from sklearn.linear_model import LogisticRegression
from sklearn.neural_network import MLPRegressor
from sklearn.svm import SVC
from IPython.display import display # Allows the use of display() for DataFrames
# Config the matlotlib backend as plotting inline in IPython
# %matplotlib inline
# constants
FIG_SIZE = (14,8)
TEST_SIZE = 0.10

"""# New Section"""

data1 = pd.read_excel('Sleep_Detection_Dataset.xlsx')
data1.head()

#Visualize correlation of the data
correlations = data1.corr()
plt.figure(figsize = FIG_SIZE)
plt.title("Heatmap of feature correlations")
_ = sns.heatmap(correlations, vmin=0, vmax=1, annot=True)

#use qcut to bin heart rate data  & label data
data = data1.copy()
data["heart rate"] = pd.qcut(data['heart rate'], 5, labels = [5, 4, 3, 2, 1]) # 5 bins

data.head()

"""START with first Model  DecisionTreeRegressor

"""

#Decision Tree Model


testSet = data[['heart rate']]

target = data[['psg label']]
X = data[['heart rate']]

# split trainig data
X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size=TEST_SIZE,random_state=1)

decision_tree = tree.DecisionTreeRegressor() #splitter = 'random', max_leaf_nodes = 10, min_samples_leaf = 5, max_depth= 5
decision_tree = decision_tree.fit(X_train, Y_train)

#prediction on trainned model using traning data
predictions = decision_tree.predict(X_test)
print('Accuracy of Decision Tree on test set: {:.2f}'.format(decision_tree.score(X_test, Y_test)))

#prediction on test data
result_test = decision_tree.predict(testSet)

from sklearn.ensemble import RandomForestRegressor 


testSet = data[['heart rate']]

target = data[['psg label']]
X = data[['heart rate']]

# split trainig data
X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size=TEST_SIZE,random_state=42)
RF = RandomForestRegressor (n_estimators=100, max_depth=3, random_state=42)

RF.fit(X_train, Y_train.values.ravel())

result_test = RF.predict(X_test)
print('Accuracy of RandomForestClassifier on test set: {:.2f}'.format(RF.score(X_test, Y_test)))
plt.scatter(Y_test, result_test)

#prediction on test data
result_test = RF.predict(testSet)

#neural network Model trial 
testSet = data[['heart rate']]

target = data[['psg label']]
X = data[['heart rate']]


# split trainig data
X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size=TEST_SIZE,random_state=42)

clf = MLPRegressor()
clf.fit(X_train, Y_train)

print('Accuracy of neural network on test set: {:.4f}'.format(clf.score(X_test, Y_test)))

#prediction on trainned model using traning data
predictions = clf.predict(X_test)
plt.scatter(Y_test, predictions)

#prediction on test data
neural_net_result_test = clf.predict(testSet)

from sklearn.neighbors import KNeighborsRegressor

testSet = data[['heart rate']]

target = data[['psg label']]
X = data[['heart rate']]

# split trainig data
X_train, X_test, Y_train, Y_test = train_test_split(X, target, test_size=TEST_SIZE,random_state=42)

knn = KNeighborsRegressor(n_neighbors=100)
knn.fit(X_train, Y_train)

print('Accuracy of neural network on test set: {:.4f}'.format(knn.score(X_test, Y_test)))

#prediction on trainned model using traning data
predictions = knn.predict(X_test)
plt.scatter(Y_test, predictions)

#prediction on test data
Knn_prediction = knn.predict(testSet)

#download code as Pdf file

!sudo apt-get install texlive-xetex
!jupyter nbconvert --to pdf Add_Column_Special_Event_Day_Feature.ipynb